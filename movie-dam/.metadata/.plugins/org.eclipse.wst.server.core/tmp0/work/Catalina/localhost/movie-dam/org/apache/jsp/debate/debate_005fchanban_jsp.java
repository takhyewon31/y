/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.53
 * Generated at: 2018-10-19 12:52:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.debate;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.ArrayList;
import moviedam.debate.ChanbanDBBean;
import moviedam.debate.ChanbanDataBean;
import moviedam.debate.ChanbanCommentDBBean;
import moviedam.debate.ChanbanCommentDataBean;

public final class debate_005fchanban_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/C:/_server/movie-dam/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/movie-dam/WEB-INF/lib/standard.jar!/META-INF/fn.tld", Long.valueOf(1090214156000L));
    _jspx_dependants.put("jar:file:/C:/_server/movie-dam/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/movie-dam/WEB-INF/lib/standard.jar!/META-INF/c.tld", Long.valueOf(1090214156000L));
    _jspx_dependants.put("/WEB-INF/lib/standard.jar", Long.valueOf(1539818326000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("moviedam.debate.ChanbanDBBean");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("moviedam.debate.ChanbanCommentDBBean");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("moviedam.debate.ChanbanCommentDataBean");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("moviedam.debate.ChanbanDataBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	request.setCharacterEncoding("utf-8");
	String title = "찬반 토론";
	String pageNum = request.getParameter("pageNum");
	String option = request.getParameter("option");
	String search = request.getParameter("search");

      out.write('\n');

	int pageSize = 10;
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");

      out.write('\n');

	if (pageNum == null) {
		pageNum = "1";
	}

	int currentPage = Integer.parseInt(pageNum);
	int startRow = (currentPage - 1) * pageSize + 1;
	int endRow = currentPage * pageSize;
	int count = 0;
	int ccount = 0;
	int number = 0;
	int total_page = 0;
	String content = "";
	List<ChanbanDataBean> chanbanList = null;

	try {
		ChanbanDBBean chanban_db = ChanbanDBBean.getInstance();

		ArrayList<ChanbanCommentDataBean> commentList = null;
		ChanbanCommentDBBean cb_comment_db = ChanbanCommentDBBean.getInstance();

		count = chanban_db.getChanbanCount(option, search); //전체 글 수
		if (count > 0) {
			chanbanList = chanban_db.getChanbans(startRow, endRow, option, search);
		}

		number = count - (currentPage - 1) * pageSize;

      out.write('\n');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/module/header.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("title", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(title), request.getCharacterEncoding()), out, false);
      out.write('\n');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/module/nav.jsp", out, false);
      out.write("\n");
      out.write("\n");
      out.write("<!-- ***** Breadcumb Area Start ***** -->\n");
      out.write("<div class=\"breadcumb-area bg-img bg-overlay\"\n");
      out.write("\tstyle=\"background-image: url(/movie-dam/assets/img/bg-img/hero-1.jpg)\"></div>\n");
      out.write("<!-- ***** Breadcumb Area End ***** -->\n");
      out.write("\n");
      out.write("<!-- ***** Listing Destinations Area Start ***** -->\n");
      out.write("<section class=\"dorne-listing-destinations-area section-padding-100-50\">\n");
      out.write("\t<div class=\"container\">\n");
      out.write("\t\t<div class=\"row\">\n");
      out.write("\t\t\t<div class=\"col-12\">\n");
      out.write("\t\t\t\t<div class=\"section-heading dark text-center\">\n");
      out.write("\t\t\t\t\t<h4>Pro and con debate</h4>\n");
      out.write("\t\t\t\t\t<p>영화를 주제로 한 다양한 찬반 토론 ");
      out.print(count);
      out.write("개가 진행중입니다.</p><br>\n");
      out.write("\t\t\t\t\t<button class=\"btn btn-sm btn-outline-secondary\" onclick=\"document.location.href='chanban_writeForm.jsp?cb_writer=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.userid}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'\">글쓰기</button>\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t</div>\n");
      out.write("\t\t\n");
      out.write("\t\t<div class=\"row justify-content-center\">\n");
      out.write("\t\t\t<div class=\"col-10\">\n");
      out.write("\t\t\t\t<form>\n");
      out.write("\t\t\t\t\t<div class=\"form-group\">\n");
      out.write("\t\t\t\t\t\t<div class=\"input-group mb-3\">\n");
      out.write("\t\t\t\t\t\t\t<div class=\"input-group-prepend\">\n");
      out.write("\t\t\t\t\t\t\t\t<select class=\"form-control\" name=\"option\">\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"all\">전체글</option>\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"cb_title\">제목</option>\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"cb_content\">내용</option>\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"cb_writer\">작성자</option>\n");
      out.write("\t\t\t\t\t\t\t\t</select>\n");
      out.write("\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t\t<input class=\"form-control\" type=\"text\" name=\"search\" placeholder=\"관심있는 토론 주제를 검색해 보세요.\">\n");
      out.write("\t\t\t\t\t\t\t<div class=\"input-group-append\">\n");
      out.write("\t\t\t\t\t\t\t\t<input class=\"btn btn-outline-secondary\" type=\"submit\" value=\"검색\">\n");
      out.write("\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t</form>\n");
      out.write("\t\t\t</div>\t\t\t\t\t\n");
      out.write("\t\t</div>\n");
      out.write("\t\t<br>\n");
      out.write("\t\t\n");
      out.write("\n");
      out.write("\t\t\n");

			if (count == 0) {

      out.write("\n");
      out.write("\t\t<div class=\"alert alert-danger\" role=\"alert\">게시판에 저장된 글이 없습니다.</div>\n");
      out.write("\n");

			} else {

      out.write("\n");
      out.write("\t\t<div class=\"container\">\n");
      out.write("\t\t\t<div class=\"row justify-content-center\">\n");
      out.write("\t\t\t\t<!-- Single Features Area -->\n");
      out.write("\t\t\t\t<div class=\"col-10\">\n");

						int a = count / pageSize + (count % pageSize == 0 ? 0 : 1); //전체페이지 수 
							if (Integer.parseInt(pageNum) > a) {

      out.write("\n");
      out.write("\t\t\t\t\t");
      if (true) {
        _jspx_page_context.forward("error.jsp");
        return;
      }
      out.write('\n');

							}
							
							for (int i = 0; i < chanbanList.size(); i++) {
								ChanbanDataBean chanban = chanbanList.get(i);
								String textWithoutTag = chanban.getCb_content().replaceAll("<(/)?([a-zA-Z]*)(\\s[a-zA-Z]*=[^>]*)?(\\s)*(/)?>", "");					
								
								ccount = cb_comment_db.getChanbanCmtCount(chanban.getCb_id());

      out.write("\t\n");
      out.write("\t\t\t\t\t<ul class=\"list-unstyled\">\n");
      out.write("\t\t\t\t\t\t<li class=\"media\">\n");
      out.write("\t\t\t\t\t\t\t<img class=\"mr-3\" src=\"https://via.placeholder.com/128x128\" alt=\"Generic placeholder image\">\n");
      out.write("\t\t\t\t\t\t\t<div class=\"media-body\">\n");
      out.write("\t\t\t\t\t\t\t\t<h5 class=\"mt-0 mb-1\">\n");
      out.write("\t\t\t\t\t\t\t\t\t<a href=\"chanban_content.jsp?cb_id=");
      out.print(chanban.getCb_id());
      out.write("&pageNum=");
      out.print(currentPage);
      out.write("\" style=\"color: black;\">");
      out.print(chanban.getCb_title());
      out.write("</a>\n");
      out.write("\t\t\t\t\t\t\t\t\t");
 if (chanban.getCb_hits() <= 20) {
      out.write("<span class=\"badge badge-info\">H</span>");
}
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t</h5>\n");
      out.write("\t\t\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\t\t\t<div>");
      out.print(textWithoutTag );
      out.write("</div>\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"hashtag\">\n");
      out.write("\t\t\t\t\t\t\t\t\t<a type=\"buttn\" class=\"btn btn-outline-primary btn-sm\">#캡틴아메리카</a>\n");
      out.write("\t\t\t\t\t\t\t\t\t<a type=\"buttn\" class=\"btn btn-outline-primary btn-sm\">#공리주의</a>\n");
      out.write("\t\t\t\t\t\t\t\t\t<a type=\"buttn\" class=\"btn btn-outline-primary btn-sm\">#권력</a> \n");
      out.write("\t\t\t\t\t\t\t\t\t<a type=\"buttn\" class=\"btn btn-outline-primary btn-sm\">#영웅</a>\n");
      out.write("\t\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"pro-con-icon\">\n");
      out.write("\t\t\t\t\t\t\t\t\t<span id=\"pros\"><i class=\"fas fa-thumbs-up fa-sm\"></i> 찬성 </span> \n");
      out.write("\t\t\t\t\t\t\t\t\t<span id=\"cons\"><i class=\"fas fa-thumbs-down fa-sm\"></i> 반대 </span> \n");
      out.write("\t\t\t\t\t\t\t\t\t<span id=\"opinion\"><i class=\"fas fa-comments fa-sm\"></i> 의견 </span>\n");
      out.write("\t\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t</li>\n");
      out.write("\t\t\t\t\t</ul>\n");
      out.write("\t\t\t\t\t<hr>\n");
      out.write("\t\n");

						}

      out.write("\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t\t\n");
      out.write("\t\t</div>\n");
      out.write("\t\t\n");
      out.write("\t\t<nav aria-label=\"Page navigation\">\n");
      out.write("\t\t\t<ul class=\"pagination justify-content-center\">\n");

					if (count > 0) {
						//전체 페이지수 구하기//50개=>5페이지, 51~59개=>6페이지
						int pageCount = count / pageSize + (count % pageSize == 0 ? 0 : 1);
	
						if (pageCount < currentPage) {
							currentPage = pageCount;
						}
						//한 페이지에 보여지는 시작페이지 구하기
						int startPage = 1;
	
						if (currentPage % 10 != 0)
							startPage = (int) (currentPage / 10) * 10 + 1;
						else
							startPage = ((int) (currentPage / 10) - 1) * 10 + 1;
	
						int pageBlock = 10; //한 페이지에 보여줄 페이지수 설정
	
						//한 페이지에 보여지는 끝페이지 구하기
						int endPage = startPage + pageBlock - 1;
						if (endPage > pageCount) {
							endPage = pageCount;
						}
	
						if (startPage > 10) {

      out.write("\n");
      out.write("\t\t\t\t<li class=\"page-item\"><a class=\"page-link\" href=\"free_board.jsp?pageNum=");
      out.print(startPage - 10);
      out.write("\">이전</a></li>\n");

					}
					
					for (int i = startPage; i <= endPage; i++) {
						if (i == currentPage) {

      out.write("\n");
      out.write("\t\t\t\t<li class=\"page-item active\">\n");
      out.write("\t\t\t\t\t<a class=\"page-link\" href=\"free_board.jsp?pageNum=");
      out.print(i);
      out.write('"');
      out.write('>');
      out.print(i);
      out.write("<span class=\"sr-only\">(current)</span></a>\n");
      out.write("\t\t\t\t</li>\n");

						} else {

      out.write("\n");
      out.write("\t\t\t\t<li class=\"page-item\"><a class=\"page-link\" href=\"free_board.jsp?pageNum=");
      out.print(i);
      out.write('"');
      out.write('>');
      out.print(i);
      out.write("</a></li>\n");

						}
					}
					
					if (endPage < pageCount) {

      out.write("\n");
      out.write("\t\t\t\t<li class=\"page-item\"><a class=\"page-link\" href=\"free_board.jsp?pageNum=");
      out.print(startPage + 10);
      out.write("\">다음</a></li>\n");

					}
							}
						}

      out.write("\n");
      out.write("\t\t\t</ul>\n");
      out.write("\t\t</nav>\n");

			} catch (Exception e) {
			}
	

      out.write("\n");
      out.write("\t</div>\n");
      out.write("</section>\n");
      out.write("<!-- ***** Listing Destinations Area End ***** -->\n");
      out.write("\n");
      out.write("\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/module/footer.jsp", out, false);
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
